mindmap = (function() {
    var v = new Date(1, 1, 2E3, 12, 0, 0),
    B = !1,
    z = 500;

    function G(b) {
        for (var r = 0, n = 0; n < b.length; n++) {
            var e = b.charAt(n);
            "\t" == e && r++;
            if ("\t" != e && " " != e) break
        }
        return r
    }

    function H(b) {
        var r = {
            label: "",
            linkLabel: !1
        };
        b = b.trim();
        if ("(" == b.charAt(0)) {
            var n = b.indexOf(")");
            0 < n && (r.linkLabel = b.substr(1, n - 1), b = b.substring(n + 1).trim())
        }
        r.label = b;
        return r
    }

    
    function render(a) {
        d.execute($("#textArea").val(), a)
        l = +new Date
        e()
        return false
    }

    function updateCanvasSize() {
        d.settings({
            width: $("#viewer-container").innerWidth(),
            height: $("#viewer-container").innerHeight()
        })
    }

    function r(a) {
        if (new Date - v < z) setTimeout(r, z);
        else {
            B = !1;
            a = a ? $(window).innerWidth() -
                20 : $(window).innerWidth() - $("#leftPane").width() - 20;
            var g = $("#containerTable").height();
            d.settings({
                width: a,
                height: g
            })
        }
    }

    function n() {
        $("#logo i").hasClass("icon-chevron-down") ? ($("#logo i").removeClass("icon-chevron-down").addClass("icon-chevron-up"), $("#leftPane").hide()) : ($("#logo i").removeClass("icon-chevron-up").addClass("icon-chevron-down"), $("#leftPane").show());
        r(!0)
    }

    function e() {
        var a = 1 == d.settings("coloringMode") ? d.getLevels() + 1 : d.getBranches() + 1,
            g = 1 == d.settings("coloringMode") ? "Level" :
            "Branch";
        $("#colorsdiv").empty();
        for (var c = d.settings("bgcolors"), h = 0; h < a; h++) {
            c[h] || (c[h] = c[c.length - 1], d.settings({
                bgcolors: c
            }));
            var e = 0 == h ? "Root" : g + " " + h;
            $("#colorsdiv").append("<input class='bgcolors' id='color" + h + "' pickerNbr=" + h + " data-default-value=" + c[h] + " type=text value='" + c[h] + "'>").append("<span class=s50>" + e + "</span><br>")
        }
        $(".bgcolors").minicolors({
            textfield: !1,
            change: function(a, b) {
                var g = d.settings("bgcolors");
                g[parseInt(picker)] = a;
                d.settings({
                    bgcolors: g
                })
            },
            show: function() {
                picker = $(this).attr("pickerNbr")
            },
            position: "top left",
            hideSpeed: 0,
            showSpeed: 0
        })
    }

    function p() {
        setCookie();
        $(".errorMsg").hide();
        $(".loginUser").hide();
        $("#sendMsg").html("");
        logged_in && userid ? ($("#mapEmail").val(user), $("#user").text(user), $(".guest").hide(), $(".user").show()) : ($(".user").hide(), $(".guest").show());
        if ("unsaved" == savingState) {
            var a = $("#textArea").val();
            (a = a.substring(0, a.indexOf("\n"))) && $("#mapTitle").val(a.replace("\t", ""));
            $("#savingStateSaved").hide();
            $("#savingStateViewOnly").hide();
            $("#savingStateUnsaved").show()
        } else if ("viewonly" == savingState) $("#savingStateSaved").hide(), $("#savingStateViewOnly").show(), $("#savingStateUnsaved").show();
        else if ("saved" == savingState) $("#savingStateViewOnly").hide(), $("#savingStateUnsaved").hide(), $("#savingStateSaved").show(), w();
        else {
            console.log("Unknown saving state.");
            return
        }
    }

    function w() {
        if ("unsaved" == savingState || "viewonly" == savingState) {
            var a = $("#mapTitle").val(),
                g = a && 0 < a.length && " " != a && "  " != a;
            $("#reminderForT")[0].style.display =
                g ? "none" : "inline";
            var c = $("#mapEmail").val(),
                h = c && 2 == c.split("@").length && c.lastIndexOf(".") > c.indexOf("@");
            $("#reminderForE")[0].style.display = h ? "none" : "inline";
            if (!g || !h) return !1
        }
        $(".savingInProgress").show();
        $("#savingFinished").hide();
        g = C();
        a && (g.maptitle = a);
        c && (g.email = c);
        g.savingState = savingState;
        g.viewcode = viewcode;
        g.admincode = admincode;
        logged_in && (g.userid = userid);
        $.ajax({
            url: "saveMap.php",
            type: "POST",
            data: g,
            success: function(a) {
                $(".errorMsg").hide();
                $("#savingFinished").show();
                $(".savingInProgress").hide();
                $("#saveMindMapBtn").hide();
                a.status && "OK" == a.status ? (savingState = "saved", admincode = a.admincode, viewcode = a.viewcode, $("#savingStateUnsaved").css("display", "none"), $("#savingStateViewOnly").css("display", "none"), $("#savingStateSaved").css("display", "inline"), $(".savedMapInfo").show(), url = "text2mindmap.com/" + a.admincode, $(".adminLink").html('<a href="http://' + url + '" target="_blank" title="Link to this mind map">' + url + "</a>"), url = "text2mindmap.com/" + a.viewcode, $(".viewLink").html('<a href="http://' +
                    url + '" target="_blank" title="Link to a view-only version of this mind map">' + url + "</a>"), $("#lastSavedInfo").html(a.lastsaved), hasChanged = !1, $(".saveMsg").hide()) : (console.log("handleSaveResponse(): data.status did not return OK"), y())
            },
            timeout: 3E4,
            error: function(a) {
                y(a)
            }
        })
    }

    function y(a) {
        $(".errorMsg").show();
        console.log("handleSavingError(): There was an error while saving the file.", a.responseText)
    }

    function A() {
        d.getImage(function(a) {
            s = a;
            $("#thumbnailImage")[0].src = s
        }, 1);
        $("#downloadPNG").html('<i class="icon-download-alt"></i> Download image</button>');
        $("#downloadPDF").html('<i class="icon-download-alt"></i> Download PDF</button>');
        return !1
    }

    function D(a, g) {
        if (1 == g) {
            var c = s;
            $('<form method="POST" action="' + a + '" style="display:none"><textarea name="imgdata" style="display:none">' + c + "</textarea></form>").appendTo("body").submit();
            $("#downloadPNG").html('<i class="icon-download-alt"></i> Download image')
        } else d.getImage(function(g) {
            c = g;
            $('<form method="POST" action="' + a + '" style="display:none"><textarea name="imgdata" style="display:none">' +
                c + '</textarea><input type="hidden" name="logged_in" value="' + logged_in + '"></form>').appendTo("body").submit()
        }, 2), $("#downloadPDF").html('<i class="icon-download-alt"></i> Download PDF')
    }

    function C() {
        var a = {};
        a.text = $("#textArea").val();
        a.font = d.settings("font");
        a.fontColor = d.settings("fontColor");
        a.fontSize = d.settings("fontSize");
        a.lineColor = d.settings("lineColor");
        a.lineWidth = d.settings("lineWidth");
        a.coloringMode = d.settings("coloringMode");
        a.bgcolors = JSON.stringify(d.settings("bgcolors"));
        a.positions =
            JSON.stringify(d.exportPositions());
        a.showLockIcons = null;
        a.lockAfterMoving = d.settings("lockAfterMoving") ? 1 : 0;
        a.transform = JSON.stringify(d.settings("transform"));
        a.version = 0.4;
        return a
    }

    function m(a) {
        try {
            $("#textArea").val(a.text);
            var g = {
                font: a.font,
                fontColor: a.fontColor,
                fontSize: parseInt(a.fontSize),
                lineColor: a.lineColor,
                lineWidth: parseFloat(a.lineWidth),
                coloringMode: parseInt(a.coloringMode),
                lockAfterMoving: parseInt(a.lockAfterMoving),
                bgcolors: JSON.parse(a.bgcolors),
                transform: JSON.parse(a.transform)
            };
            $(".fontcolor").minicolors("value", g.fontColor);
            $(".linecolor").minicolors("value", g.lineColor);
            var c = 1 == g.lockAfterMoving ? !0 : !1;
            $("#lockAfterMoving").prop("checked", c);
            if (1 == g.coloringMode) {
                $("#mode1").addClass("active")
                $("#mode2").removeClass("active")
            } else {
                $("#mode1").removeClass("active")
                $("#mode2").addClass("active")
            }
            d.settings(g);
            render(!0);
            var h = JSON.parse(a.positions);
            d.importPositions(h, a.version);
            hasChanged = !1;
            t = a.text;
            $(".saveMsg").hide()
        } catch (e) {
            alert("Sorry, there was an error while opening the mind map:\n" +
                e), render()
        }
    }
    
    $(document).ready(function() {
        //TODO:
        d = new I("stageHolder", {
            width: $("#viewer-container").innerWidth(),
            height: $("#viewer-container").innerHeight()
        });
        hasChanged = !1;
        var s = null,
            t = "",
            l = 0;
        $("#textArea").keydown(function(a) {
            if (9 == a.which || 13 == a.which) {
                a.preventDefault();
                var g = this.selectionStart,
                    c = this.selectionEnd,
                    h = $(this).val(),
                    e = h.lastIndexOf("\n", g - 1)
            }
            if (9 == a.which) {
                if (g <= c) {
                    lastBreak = h.indexOf("\n", c - 1);
                    lastBreak < c && (lastBreak = c);
                    var d = h.substring(e + 1, lastBreak).split("\n");
                    nbr = 0;
                    if (a.shiftKey) {
                        d.forEach(function(a, b) {
                            "\t" == a.charAt(0) && (d[b] = a.substring(1, a.length), nbr++)
                        });
                        var f = d.join("\n")
                    } else f = "\t" + d.join("\n\t"), nbr = d.length;
                    $(this).val(h.substring(0, e + 1) + f + h.substring(lastBreak, h.length));
                    this.selectionStart = a.shiftKey ? g - Math.min(1, nbr) : g + Math.min(1, nbr);
                    this.selectionEnd = a.shiftKey ? c - nbr : c + nbr
                }
            } else if (13 == a.which) {
                if (a.ctrlKey) return render();
                a = "\n";
                for (c = e; c <= g; c++)
                    if (f = h.charAt(c), "\t" == f) a += "\t";
                    else if (" " != f && "\n" != f) break;
                "\n" == a && -1 == e && (a = "\n\t");
                $(this).val(h.substring(0,
                    g) + a + h.substring(g, h.length));
                this.selectionStart = g + a.length;
                this.selectionEnd = g + a.length
            }
        });
        $.support.style || $("#textArea").resizable({
            handles: "se",
            minWidth: 288
        });
        $("#indent").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $("#textArea").trigger(jQuery.Event("keydown", {
                which: 9,
                shiftKey: !1
            }))
        });
        $("#outdent").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $("#textArea").trigger(jQuery.Event("keydown", {
                which: 9,
                shiftKey: !0
            }))
        });
        $("#logo").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            n()
        });
        $("#showFaq").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $("#faqMore").show();
            $(this).hide();
            return !1
        });
        $("#stageHolder").on("mousewheel", function(e) {
            d.zoom(e.originalEvent.wheelDelta);
        });
        $("#zoomInBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            d.zoom(120);
            return !1
        });
        $("#zoomOutBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            d.zoom(-120);
            return !1
        });
        $("#lockAfterMoving").change(function() {
            d.settings({
                lockAfterMoving: $(this).prop("checked")
            })
        });

        $("#coloringMode").change(function(a) {
            d.settings({
                coloringMode: $(this).val()
            });
        });

        $("a.fonts").on("touchstart click", function(a) {
            d.settings({
                font: $(this).text()
            })
        });
        $("a.fontSize").on("mouseover touchstart", function() {
            d.settings({
                fontSize: $(this).text()
            })
        });
        $(".lineWidth").on("mouseover touchstart", function() {
            d.settings({
                lineWidth: $(this).attr("val")
            })
        });
        $("input.fontcolor").minicolors({
            textfield: !1,
            animationSpeed: 0,
            change: function(a, b) {
                d.settings({
                    fontColor: a
                })
            },
            position: "top left",
            hideSpeed: 0,
            showSpeed: 0
        });
        $("input.linecolor").minicolors({
            textfield: !1,
            animationSpeed: 0,
            change: function(a, b) {
                d.settings({
                    lineColor: a
                })
            },
            position: "top left",
            hideSpeed: 0,
            showSpeed: 0
        });
        $("body").keydown(function(a) {
            if (a.ctrlKey || a.metaKey) {
                switch (String.fromCharCode(a.which).toLowerCase()) {
                    case "s":
                        a.preventDefault();
                        p();
                        break;
                    case "d":
                        a.preventDefault();
                        A();
                        break;
                    case "t":
                        a.preventDefault(), n()
                }
                187 == a.which || 107 == a.which ? d.zoom(120) : 189 != a.which && 109 != a.which || d.zoom(-120)
            }
        });
        $("#mapEmail").keydown(function(a) {
            13 == a.which && w()
        });
        $("#signInFromModal").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $(".user, .guest").hide();
            $(".loginUser").show();
            return !1
        });
        $("#signInBtn").on("touchstart click", function(a) {
            setCookie()
        });
        $("#signOutFromModal").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $.get("index.php/user/signout/0", function() {
                userid = user = logged_in = !1;
                p()
            });
            return !1
        });
        $("#signInFromModalForm").submit(function(a) {
            $("#signInMsg").hide();
            a.preventDefault();
            a = $("#signInFromModalForm .user_username").val();
            var g = $("#signInFromModalForm .user_password").val();
            a && g ? $.ajax({
                type: "POST",
                url: "index.php/user/signin",
                data: $("#signInFromModalForm").serialize(),
                success: function(a) {
                    "0" != a && 0 != a && a ? (a = JSON.parse(a), userid = a.userid, user = a.user,
                        logged_in = 1, p()) : $("#signInMsg").text("Sorry, wrong email/password combination").show()
                },
                error: function() {
                    $("#signInMsg").text("Sorry, there seems to be a technical problem.").show()
                }
            }) : $("#signInMsg").text("Please provide your email and password to sign in").show();
            return !1
        });
        $("#saveAsGuestLink").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $(".loginUser, .user").hide();
            $(".guest").show()
        });
        $("#saveBtn, .saveBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            p();
            return !1
        });
        $("#saveMindMapBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            w();
            return !1
        });
        $("#mindmap-lock-all").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            d.setNodeLocks(!0);
            return !1
        });
        $("#mindmap-unlock-all").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            d.setNodeLocks(!1);
            return !1
        });
        $("#helpBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            return !1
        });
        $("#newBtn, .newBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            hasChanged && !1 == confirm("Create a new mind map without saving this one first?") ? a = void 0 : ($("#textArea").val(""), d.clear(), savingState = "unsaved", viewcode = admincode = "", hasChanged = !1, $(".saveMsg").hide(), $.cookie("current-mindmap", !1, {
                expires: -1
            }), a = !1);
            return a
        });
        $("#downloadBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            return A()
        });
        $("#downloadPNG").on("touchstart click",
            function(a) {
                a.stopPropagation();
                a.preventDefault();
                $("#downloadPNG").append(" <i class='icon-spinner icon-spinn'></i>");
                D("downloadPNG.php", 1)
            });
        $("#downloadPDF").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $("#downloadPDF").append(" <i class='icon-spinner icon-spinn'></i>");
            D("downloadPDF.php", 2)
        });
        $("#feedbackBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            $("#sendFeedbackMsg").html("Sending... <i class='icon-spinner icon-spin'></i>");
            $.ajax({
                url: "sendFeedback.php",
                data: {
                    msg: $("#fm").val(),
                    val: $("#fe").val(),
                    admincode: admincode,
                    viewcode: viewcode
                },
                timeout: 3E4,
                success: function() {
                    $("#sendFeedbackMsg").html("<b class='text-success'>Sent. Thank you for your feedback.</b>")
                }
            });
            return !1
        });
        $("#sendMailBtn").on("touchstart click", function(a) {
            $("#sendMsg").html("Sending... <i class='icon-spinner icon-spin'></i>");
            a.stopPropagation();
            a.preventDefault();
            $.ajax({
                url: "sendMail.php",
                data: {
                    address: $("#sendEmailMail").val(),
                    admincode: admincode,
                    viewcode: viewcode
                },
                timeout: 3E4,
                success: function() {
                    $("#sendMsg").html(" <b class='text-success'> Sent</b>")
                },
                error: function() {
                    $("#sendMsg").html(" Sorry, there seem to be a technical problem. Please try again later.")
                }
            });
            return !1
        });
        $("#sendReminderBtn").on("touchstart click", function(a) {
            $("#sendReminderMsg").html("Sending... <i class='icon-spinner icon-spin'></i>");
            a.stopPropagation();
            a.preventDefault();
            $.ajax({
                url: "sendReminder.php",
                data: {
                    email: $("#forgot_e").val()
                },
                timeout: 3E4,
                success: function() {
                    $("#sendReminderMsg").html("<b class='text-success'>Email sent.</b>")
                },
                error: function() {
                    $("#sendReminderMsg").html(" Error: Please try again later.")
                }
            });
            return !1
        });
        $("#toggle1").on("touchstart click", function(a) {
            $("#toggle1").removeClass("toggleInactive").addClass("toggleActive");
            $("#toggle2").removeClass("toggleActive").addClass("toggleInactive");
            $("#tab2").removeClass("active");
            $("#tab1").addClass("active");
            a.preventDefault()
        });
        $("#toggle2").on("touchstart click", function(a) {
            $("#toggle2").removeClass("toggleInactive").addClass("toggleActive");
            $("#toggle1").removeClass("toggleActive").addClass("toggleInactive");
            $("#tab1").removeClass("active");
            $("#tab2").addClass("active");
            a.preventDefault()
        });
        $("#drawBtn").on("touchstart click", function(a) {
            a.stopPropagation();
            a.preventDefault();
            render();
            var g;
            $("#textArea").val() == t ? ($("#holder").popover({
                content: "<b class='text-success'>No changes have been made</b><br>Indent text using the <b>TAB key</b> on your keyboard, then draw again.",
                html: !0,
                trigger: "manual",
                delay: {
                    show: 200,
                    hide: 500
                }
            }).popover("show"), clearTimeout(g), g = setTimeout(function() {
                    $("#holder").popover("destroy")
                },
                2200)) : t = $("#textArea").val()
        });
        x = $("#textArea").val().indexOf("\n", $("#textArea").val().indexOf("\n") + 1);
        this.setSelectionRange && $("#textArea")[0].setSelectionRange(x, x);
        setCookie = function() {
            if ("error404" != viewcode) {
                var a = C();
                a && ($.cookie("current-mindmap", JSON.stringify(a), {
                    expires: 1
                }), $(".saveMsg").show());
                a = new Date;
                a.setTime(a.getTime() + 6E5);
                $.cookie("timestamp", "1", {
                    expires: a
                })
            }
        };
    });

    var I = function(q, r) {
        function n(a, g, c) {
            c = "undefined" == typeof c ? !1 : c;
            var h = l.getTransform().m;
            if (c) return {
                x: (a - h[4]) / h[0],
                y: (g - h[5]) / h[3]
            };
            c = $("#" + q).offset();
            return {
                x: (a - c.left - h[4]) / h[0],
                y: (g - c.top - h[5]) / h[3]
            }
        }
        var e = {
                bgcolors: "#3f3a3a #2365ba #16c75e #ff481c #ffa81c #365C8E #31975A #C2583F #C2903F #9d9d9d".split(" "),
                coloringMode: 2,
                fontSize: 20,
                fontMinSize: 11,
                font: "Helvetica, Verdana, sans-serif",
                fontColor: "#ffffff",
                lineColor: "#cccccc",
                lineWidth: 1.5,
                scale: 1,
                lockAfterMoving: !0,
                linkLength: 80,
                friction: 0.9,
                charge: 1600,
                width: 400,
                height: 400,
                gravity: 0.1
            },
            e = $.extend({}, e, r),
            p = [],
            w = 0,
            y = "",
            A = 0,
            D = 0,
            C, m = !1,
            x = !1,
            f, d = {
                nodes: [],
                links: []
            },
            s = 0,
            t = 0,
            l = new Kinetic.Layer,
            v = new Kinetic.Stage({
                container: q,
                width: e.width,
                height: e.height
            });
        v.add(l);
        var B = document.getElementById(q),
            z = $("#" + q);
        z.on("touchstart mousedown", function(a) {
            m || (x = !0, $(window).on("touchmove mousemove", function(a) {
                a.stopPropagation();
                a.preventDefault();
                s && t || (s = a.pageX || a.originalEvent.touches[0].pageX || a.originalEvent.changedTouches[0].pageX, t = a.pageY || a.originalEvent.touches[0].pageY || a.originalEvent.changedTouches[0].pageY);
                var b = a.pageX || a.originalEvent.touches[0].pageX || a.originalEvent.changedTouches[0].pageX;
                a = a.pageY || a.originalEvent.touches[0].pageY || a.originalEvent.changedTouches[0].pageY;
                l.move(b - s, a - t);
                s = b;
                t = a;
                l.draw()
            }));
            a.stopPropagation();
            a.preventDefault()
        });
        z.on("touchmove mousemove", function(a) {
            m && (a = n(a.pageX ||
                a.originalEvent.targetTouches[0].pageX, a.pageY || a.originalEvent.targetTouches[0].pageY), m.x = a.x + C.x, m.y = a.y + C.y, m.px = m.x, m.py = m.y, 0.02 > f.alpha() && f.alpha(0.025))
        });
        $(window).on("mouseup touchend", function(a) {
            x && ($(window).unbind("touchmove mousemove"), x = !1);
            m && !1 !== m.data.parent && (m.fixed = e.lockAfterMoving);
            t = s = m = !1;
            a.stopPropagation();
            a.preventDefault()
        });
        return that = {
            settings: function(a, g, c) {
                g = "undefined" == typeof g ? !0 : g;
                if ("object" == typeof a) {
                    e = $.extend({}, e, a);
                    if ("undefined" != typeof a.scale) {
                        if (f) {
                            var h =
                                f.alpha();
                            f.stop()
                        }
                        c = l.getScale().x;
                        var d = a.scale;
                        l.setScale(d);
                        l.move(0.5 * e.width * (c - d), 0.5 * e.height * (c - d));
                        f && f.alpha(h)
                    }
                    if ("undefined" != typeof a.height || "undefined" != typeof a.width) f && f.stop(), v.setHeight(e.height), v.setWidth(e.width), f && f.alpha(0.02);
                    "undefined" != typeof a.transform && (h = a.transform, l.move(h[4], h[5]), l.setScale(h[0], h[3]));
                    if ("undefined" != typeof a.linkLength || "undefined" != typeof a.charge || "undefined" != typeof a.friction || "undefined" != typeof a.gravity) {
                        if (!f) return;
                        f.linkDistance(e.linkLength);
                        f.charge(-e.charge);
                        f.friction(e.friction);
                        f.gravity(e.gravity)
                    }
                } else if ("string" == typeof a) return "transform" == a ? l.getTransform().m : e[a];
                g && that.redrawAll()
            },
            stopForce: function() {
                f && f.stop()
            },
            execute: function(a, g) {
                f && f.stop();
                that.text2mindmap(a);
                !0 !== g && (hasChanged = !0, $(".saveMsg").show());
                f ? f.start() : f = d3.layout.force().linkDistance(e.linkLength).charge(-e.charge).friction(e.friction).theta(0.99).gravity(e.gravity).size([e.width, e.height]).nodes(d.nodes).links(d.links).start().on("tick", function() {
                    var a =
                        f.alpha();
                    0.011 > a && f.alpha(0.8 * a);
                    that.redraw()
                }).on("end", function() {
                    setCookie()
                })
            },
            getImage: function(a, b) {
                f.stop();
                var c = that.getBoundingBox(20),
                    h = 1 == b ? 1 : 2736 / c.width > 1889 / c.height ? 1889 / c.height : 2736 / c.width,
                    d = l.clone(),
                    e = l.getScale().x,
                    u = n(0, 0, !0);
                d.move(u.x * e, u.y * e);
                d.move(-c.left, -c.top);
                d.setScale(1);
                var k = new Kinetic.Stage({
                    container: "hiddenStage",
                    width: c.width * h,
                    height: c.height * h
                });
                k.add(d);
                k.setScale(h);
                d.draw();
                that.fillLayerBackground(d, "#FFFFFF");
                k.toDataURL({
                    mimeType: "image/jpeg",
                    quality: 1,
                    callback: function(b) {
                        a(b);
                        d.remove();
                        k.remove()
                    }
                })
            },
            computeLayoutOffline: function(a) {
                f.start();
                for (var b = 0; b < a; b++) f.tick();
                f.stop()
            },
            fillLayerBackground: function(a, b) {
                var c = a.getCanvas(),
                    h = a.getContext();
                h.save();
                h.globalCompositeOperation = "destination-over";
                h.setTransform(1, 0, 0, 1, 0, 0);
                h.fillStyle = "#FFFFFF";
                h.fillRect(0, 0, c.width, c.height);
                h.restore()
            },
            clear: function() {
                l.removeChildren();
                d.nodes = d = {
                    nodes: [],
                    links: []
                };
                f = !1;
                y = "";
                that.execute("")
            },
            getBranches: function() {
                return A
            },
            getLevels: function() {
                return D
            },
            zoom: function(a) {
                if (0 < a && 1 > l.getScale().x) a = Math.min(1, 1.1 * l.getScale().x), that.settings({
                    scale: a
                });
                else {
                    var b = 23 / Math.pow(0.8, 3);
                    if (!(0 > a && e.fontSize <= e.fontMinSize || 0 < a && e.fontSize >= b || !1 == f)) {
                        f.stop();
                        var c = 0 < a ? 1 : -1;
                        d.nodes.forEach(function(a) {
                            a.x += 0.2 * (a.x - 0.5 * v.getWidth()) * c;
                            a.y += 0.2 * (a.y - 0.5 * v.getHeight()) * c;
                            a.px = a.x;
                            a.py = a.y
                        });
                        a = 0 > a ? {
                            fontSize: Math.max(e.fontMinSize, 0.8 * e.fontSize),
                            linkLength: Math.max(20, 0.7 * e.linkLength),
                            charge: Math.max(230, 0.6 * e.charge),
                            friction: Math.max(0.87, e.friction - 0.01),
                            gravity: Math.max(0.025, e.gravity - 0.015)
                        } : {
                            fontSize: Math.min(23 / Math.pow(0.8, 3), e.fontSize / 0.8),
                            linkLength: Math.min(80 / Math.pow(0.7, 3), e.linkLength / 0.7),
                            charge: Math.min(1700 / Math.pow(0.6, 3), e.charge / 0.6),
                            friction: Math.min(0.9, e.friction + 0.01),
                            gravity: Math.min(0.1, e.gravity + 0.015)
                        };
                        that.settings(a);
                        f.start()
                    }
                }
            },
            getBoundingBox: function(a) {
                a || (a = 0);
                for (var b = 9999, c = 9999, d = -9999, e = -9999, f = l.getChildren(), u = 0; u < f.length; u++) {
                    var k = f[u];
                    if ("Group" == k.nodeType) {
                        var E = 0.5 * k.children[0].attrs.width,
                            F = 0.5 * k.children[0].attrs.height;
                        k.attrs.x - E < c && (c = k.attrs.x - E);
                        k.attrs.y - F < b && (b = k.attrs.y - F);
                        k.attrs.x + E > d && (d = k.attrs.x + E);
                        k.attrs.y + F > e && (e = k.attrs.y + F)
                    }
                }
                return {
                    left: c - a,
                    right: d + a,
                    top: b - a,
                    bottom: e + a,
                    width: d - c + 2 * a,
                    height: e - b + 2 * a
                }
            },
            addNode: function(a, b) {
                f && f.stop();
                var c = {
                    id: w++,
                    fixed: b.fixed,
                    x: b.x,
                    y: b.y,
                    data: b
                };
                d.nodes.splice(a, 0, c);
                return c
            },
            addLink: function(a, b) {
                d.links.push({
                    source: a,
                    target: b,
                    data: {
                        color: e.lineColor,
                        weight: e.lineWidth,
                        label: a.data.linkLabel
                    }
                })
            },
            findNode: function(a) {
                for (var b = 0; b < d.nodes.length; b++)
                    if (parseInt(d.nodes[b].id) ==
                        parseInt(a)) return d.nodes[b];
                return !1
            },
            getLinksFrom: function(a) {
                var b = [];
                d.links.forEach(function(c) {
                    c.source.id == a.id && b.push(c)
                });
                return b
            },
            getLinksTo: function(a) {
                var b = [];
                d.links.forEach(function(c) {
                    c.target.id == a.id && b.push(c)
                });
                return b
            },
            isLinkedTo: function(a, b) {
                for (var c = 0; c < d.links.length; c++)
                    if (d.links[c].source.id == a.id && d.links[c].target.id == b.id) return !0;
                return !1
            },
            removeLink: function(a) {
                d.links.forEach(function(b, c) {
                    b == a && (b.ui && b.ui.remove(), d.links.splice(c, 1))
                })
            },
            setNodeLocks: function(a) {
                d.nodes.forEach(function(b) {
                    b.data.parent &&
                        (b.fixed = a)
                });
                f && !1 == a && f.resume()
            },
            removeNode: function(a) {
                f && f.stop();
                var b = d.nodes[a];
                b ? (that.getLinksFrom(b).forEach(function(a) {
                    that.removeLink(a)
                }), that.getLinksTo(b).forEach(function(a) {
                    that.removeLink(a)
                }), "undefined" != typeof b && b.ui.remove(), d.nodes.splice(a, 1)) : console.log("Could node find node with pos:" + a + "\n\n" + JSON.stringify(d.nodes))
            },
            setStartPosition: function(a) {
                if (!1 == a.data.parent) return a.x = 0.5 * e.width, a.y = 0.5 * e.height, a.px = a.x, a.py = a.y, a;
                a.x = a.data.parent.x;
                a.y = a.data.parent.y;
                var b = a.data.parent.data.children;
                b || (b = 4);
                p[a.data.parent.id] || (p[a.data.parent.id] = 1);
                var c = p[a.data.parent.id]++,
                    b = 135 + 360 / b * c,
                    c = Math.max(60, 150 - 30 * a.data.level);
                a.x += Math.round(c * Math.cos(b / 360 * 2 * Math.PI) + 10 * Math.random());
                a.y += Math.round(c * Math.sin(b / 360 * 2 * Math.PI) + 10 * Math.random());
                a.px = a.x;
                a.py = a.y;
                return a
            },
            redrawAll: function() {
                d.nodes.forEach(function(a) {
                    a.data = that.setTheme(a.data);
                    a.data.redraw = !0
                });
                d.links.forEach(function(a) {
                    a.data.color = e.lineColor;
                    a.data.weight = e.lineWidth;
                    a.data.redraw = !0
                });
                that.redraw()
            },
            redraw: function() {
                d.links.forEach(function(a) {
                    a.ui && !a.data.redraw ? a.ui.setPoints([a.source, a.target]) : (a.ui && a.ui.remove(), a.ui = that.newLine(a, a.source, a.target), l.add(a.ui), a.ui.moveToBottom(), a.data.redraw = !1)
                });
                d.nodes.forEach(function(a) {
                    a.ui && !a.data.redraw ? a.ui.setPosition(a.x, a.y) : (a.ui && a.ui.remove(), a.ui = that.newGroup(a), l.add(a.ui), a.data.redraw = !1)
                });
                l.draw()
            },
            newLine: function(a, b, c) {
                if (a.data.label) {
                    var d = c.x - b.x;
                    c = c.y - b.y;
                    var e = new Kinetic.Line({
                            points: [{
                                x: 0,
                                y: 0
                            }, {
                                x: d,
                                y: c
                            }],
                            stroke: a.data.color,
                            strokeWidth: a.data.weight
                        }),
                        f = new Kinetic.Text({
                            text: a.data.label,
                            fontSize: 11,
                            fontFamily: "Arial",
                            fill: "#666",
                            x: 0.5 * d - 50,
                            y: 0.5 * c - 6,
                            width: 100,
                            align: "center"
                        }),
                        u = new Kinetic.Group({
                            x: b.x,
                            y: b.y
                        });
                    u.add(e);
                    u.add(f);
                    u.setPoints = function(a) {
                        var b = a[1].x - a[0].x,
                            c = a[1].y - a[0].y;
                        e.setPoints([{
                            x: 0,
                            y: 0
                        }, {
                            x: b,
                            y: c
                        }]);
                        f.setPosition(0.5 * b - 50, 0.5 * c - 6);
                        u.setPosition(a[0].x, a[0].y)
                    };
                    return u
                }
                return new Kinetic.Line({
                    points: [b, c],
                    stroke: a.data.color,
                    strokeWidth: a.data.weight
                })
            },
            newGroup: function(a) {
                var b =
                    new Kinetic.Group({
                        x: a.x,
                        y: a.y
                    }),
                    c = that.newText(a),
                    d = c.getWidth(),
                    e = c.getHeight();
                c.setPosition(-0.5 * d, -0.5 * e);
                d = that.newRect(a, d, e);
                b.add(d);
                b.add(c);
                b.on("touchstart mousedown", function(b) {
                    b.stopPropagation();
                    b.preventDefault();
                    m = a;
                    m.fixed = !0;
                    var c = n(b.pageX || b.originalEvent.targetTouches[0].pageX, b.pageY || b.originalEvent.targetTouches[0].pageY);
                    C = {
                        x: m.x - c.x,
                        y: m.y - c.y
                    };
                    b.preventDefault()
                });
                return b
            },
            newRect: function(a, b, c) {
                return new Kinetic.Rect({
                    x: -0.5 * b - 1,
                    y: -0.5 * c,
                    width: b + 2,
                    height: c,
                    cornerRadius: 2,
                    fill: a.data.color,
                    opacity: 1,
                    shadowColor: "#999",
                    shadowBlur: 2,
                    shadowOffset: 2,
                    shadowOpacity: 0.5
                })
            },
            newText: function(a) {
                var g = new Kinetic.Text({
                        x: 0,
                        y: 0,
                        text: a.data.label,
                        fontSize: a.data.fontSize,
                        fontFamily: a.data.font,
                        fill: a.data.fontColor,
                        padding: 10 - Math.min(a.data.level*3, 5),
                        align: "center"
                    }),
                    c = that.maxTextWidth(a);
                g.getWidth() > c && g.setAttrs({
                    width: c
                });
                g.on("mouseover", function() {
                    B.style.cursor = "pointer";
                    for (var c = d.nodes.indexOf(a), g = $("#textArea").val().split(/\n/), e = -1, f = 0; f <= c; f++) e += g[f].length + 1; - 1 != e && "undefined" != typeof e && (f = $("#textArea")[0], g = e, f.setSelectionRange ? (f.focus(), f.setSelectionRange(g, e)) : f.createTextRange && (f = f.createTextRange(), f.collapse(!0), f.moveEnd("character", e), f.moveStart("character", g), f.select()), e = $("#textArea"), g = parseInt(e.css("line-height")), e.scrollTop(c * g))
                });
                g.on("mouseout", function() {
                    m || (B.style.cursor = "move")
                });
                return g
            },
            maxTextWidth: function(a) {
                return (new Kinetic.Text({
                    text: "MMMMMMMMMMMMMMMMMMMM",
                    fontSize: a.data.fontSize,
                    fontFamily: a.data.font
                })).getWidth()
            },
            findParent: function(a, b, c) {
                if (0 == b) return !1;
                for (a = c[b]; 0 <= b; b--)
                    if (0 < b && (c[b] < a || 0 == b)) return b;
                return 0
            },
            hashCode: function(a) {
                var b = 0;
                if (0 == a.length) return b;
                for (i = 0; i < a.length; i++) var c = a.charCodeAt(i),
                    b = (b << 5) - b + c;
                return b
            },
            exportPositions: function() {
                var a = [];
                d.nodes.forEach(function(b, c) {
                    var e = parseFloat(b.x).toFixed(2),
                        d = parseFloat(b.y).toFixed(2);
                    a.push({
                        i: c,
                        x: e,
                        y: d,
                        f: b.fixed
                    })
                });
                return a
            },
            importPositions: function(a, b) {
                f && f.stop();
                if (0.2 >= parseFloat(b)) {
                    var c = [],
                        e = [];
                    d.nodes.forEach(function(b) {
                        c[b.data.level] ?
                            c[b.data.level]++ : c[b.data.level] = 1;
                        var d = b.data.parent ? b.data.parent.data.oldId : !1,
                            g = e[d] + "-" + c[b.data.level],
                            d = that.hashCode(b.data.label + "_" + (d ? e[d] : void 0) + "_" + b.data.branch + "_" + b.data.level + "_" + d);
                        b.data.oldId = d;
                        e[d] = g;
                        for (var g = v.getWidth(), d = v.getHeight(), f = 0; f < a.length; f++) {
                            var k = a[f];
                            if (b.data.oldId == k.id) {
                                b.x = 0.5 * g + k.x / 22 * g;
                                b.y = 0.5 * d + k.y / 22 * d;
                                b.px = b.x;
                                b.py = b.y;
                                b.fixed = k.locked;
                                break
                            }
                        }
                    })
                } else
                    for (var l = 0; l < a.length; l++) {
                        var m = a[l],
                            u = 0.4 <= b ? m.f : m.fixed,
                            k = d.nodes[0.4 <= b ? m.i : m.lineNbr];
                        k && (k.x =
                            parseFloat(m.x), k.y = parseFloat(m.y), k.px = k.x, k.py = k.y, k.fixed = u)
                    }
                f && f.alpha(0.025)
            },
            text2mindmap: function(a) {
                var b = a.split(/\n/).filter(function(a) {
                        return a.match(/\S/)
                    }),
                    b = b.join("\n");
                a = difflib.stringAsLines(b);
                for (var c = difflib.stringAsLines(y), e = (new difflib.SequenceMatcher(c, a)).get_opcodes(), f = 0, m = 0, l = 0; l < e.length; l++)
                    for (var k = e[l], n = k[0], q = k[1], r = k[2], p = k[3], k = k[4], x = Math.max(r - q, k - p), v = 0; v < x; v++) {
                        if ("delete" == n || "replace" == n && p == k) {
                            var s = q - f + m;
                            that.removeNode(s);
                            f++
                        } else if ("insert" == n ||
                            "replace" == n && q == r || "replace" == n && !c[q]) {
                            var s = p,
                                t = H(a[s]);
                            that.addNode(s, {
                                label: t.label,
                                linkLabel: t.linkLabel,
                                fixed: 0 == s,
                                children: 0
                            });
                            m++
                        } else "replace" == n && (s = q, t = H(a[p]), d.nodes[s].data.label = t.label, d.nodes[s].data.linkLabel = t.linkLabel);
                        q = q < r ? q + 1 : q;
                        p = p < k ? p + 1 : p
                    }
                var w = [],
                    z = [];
                A = 0;
                a.forEach(function(a, c) {
                    w[c] = G(a);
                    z[c] = that.findParent(b, c, w);
                    w[c] > D && D++
                });
                d.nodes.forEach(function(a, b) {
                    a.data.branch = 1 == w[b] ? ++A : A;
                    a.data.level = w[b];
                    a.data.parent = 0 == b ? !1 : d.nodes[z[b]];
                    a.data = that.setTheme(a.data);
                    a.data.redraw = !0;
                    a.data.parent && !that.isLinkedTo(a, a.data.parent) && (a.data.parent.data.children++, that.getLinksFrom(a).forEach(function(a) {
                        that.removeLink(a)
                    }), that.addLink(a, a.data.parent));
                    var c = that.getLinksFrom(a);
                    (c = c[0]) && c.data.label != a.data.linkLabel && (c.data.label = a.data.linkLabel, c.data.redraw = !0)
                });
                d.nodes.forEach(function(a, b) {
                    "undefined" == typeof a.x && that.setStartPosition(a)
                });
                y = b
            },
            setTheme: function(a) {
                a.font = e.font;
                a.fontColor = e.fontColor ? e.fontColor : "#fff";
                a.fontSize = Math.max(e.fontMinSize, Math.round(e.fontSize *
                    (1 - 0.17 * a.level)));
                a.color = 1 == e.coloringMode ? a.level >= e.bgcolors.length ? e.bgcolors[e.bgcolors.length - 1] : e.bgcolors[a.level] : a.branch >= e.bgcolors.length ? e.bgcolors[e.bgcolors.length - 1] : e.bgcolors[a.branch];
                if ("undefined" == typeof a.color || null == a.color) a.color = "#eeeeee";
                var b;
                var c = a.color;
                if (c) {
                    c = c.replace(/^\s*#|\s*$/g, "");
                    3 == c.length && (c = c.replace(/(.)/g, "$1$1"));
                    b = parseInt(c.substr(0, 2), 16);
                    var d = parseInt(c.substr(2, 2), 16),
                        c = parseInt(c.substr(4, 2), 16);
                    b = "#" + (0 | 256 + b + 10 * (256 - b) / 100).toString(16).substr(1) +
                        (0 | 256 + d + 10 * (256 - d) / 100).toString(16).substr(1) + (0 | 256 + c + 10 * (256 - c) / 100).toString(16).substr(1)
                } else b = void 0;
                a.shadow = b;
                return a
            },
            text2tree: function(a) {
                y = text = a.split(/\n/).filter(function(a) {
                    return a.match(/\S/)
                });
                var d, c = [],
                    e = [];
                b.each(text, function(a, b) {
                    e[a] = G(b);
                    var f = that.findParent(text, a, e),
                        k = {
                            name: b,
                            children: [],
                            lineNbr: a
                        };
                    0 == a ? (d = k, c[a] = k) : (c[a] = k, c[f].children.push(k))
                });
                console.log(JSON.stringify(d));
                return d
            }
        }
    };

    Array.prototype.forEach || (Array.prototype.forEach = function(b, r) {
        var n, e;
        if (null ==
            this) throw new TypeError(" this is null or not defined");
        var p = Object(this),
            w = p.length >>> 0;
        if ("[object Function]" != {}.toString.call(b)) throw new TypeError(b + " is not a function");
        r && (n = r);
        for (e = 0; e < w;) {
            var y;
            e in p && (y = p[e], b.call(n, y, e, p));
            e++
        }
    })
    
    return {
        render,
        updateCanvasSize
    }
})();